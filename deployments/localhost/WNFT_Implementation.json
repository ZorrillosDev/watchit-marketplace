{
  "address": "0xcb0A9835CDf63c84FE80Fcc59d91d7505871c98B",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidPurchaseOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "approved",
          "type": "uint256"
        }
      ],
      "name": "ApprovalForCID",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "holderOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "isApprovedFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "lazyMintPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "cids",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "safePurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approved",
          "type": "uint256"
        }
      ],
      "name": "setApprovalFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x50fbac15e061b2debc0d88bce56f88ace0e227e94911df3eb32b101f7d9af53e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xcb0A9835CDf63c84FE80Fcc59d91d7505871c98B",
    "transactionIndex": 0,
    "gasUsed": "5316305",
    "logsBloom": "0x
    "blockHash": "0xc4c3a3fbfbccee5d5252c29142814079909a675ca7a56f2978329c065f41bf03",
    "transactionHash": "0x50fbac15e061b2debc0d88bce56f88ace0e227e94911df3eb32b101f7d9af53e",
    "logs": [],
    "blockNumber": 10936,
    "cumulativeGasUsed": "5316305",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5e1686a1f28503cf6e6bf031565659a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidPurchaseOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approved\",\"type\":\"uint256\"}],\"name\":\"ApprovalForCID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"holderOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"isApprovedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"lazyMintPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"cids\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"safePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approved\",\"type\":\"uint256\"}],\"name\":\"setApprovalFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedFor(address,uint256)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"lazyMintPurchase(uint256,address)\":{\"params\":{\"cid\":\"IPFS content unique identifier.\",\"owner\":\"current owner for token\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safePurchase(uint256)\":{\"details\":\"emit PurchaseResponseReceived on purchase ready to get done\",\"params\":{\"cid\":\"IPFS content unique identifier.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalFor(address,uint256,uint256)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\",\"params\":{\"approved\":\"bid amount for cid\",\"cid\":\"NFT id\",\"operator\":\"current buyer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"lazyMintPurchase(uint256,address)\":{\"notice\":\"Mint token for buyer and transfer payment for seller\"},\"safePurchase(uint256)\":{\"notice\":\"Check for safe transfer using custom approval\"},\"setApprovalFor(address,uint256,uint256)\":{\"notice\":\"This works like setApprovalForAll with cid reference instead of sender Why this? ApprovalForAll set approval for every action from operator. In our case we need allow actions for specific cid and operator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/1155-WNFT.sol\":\"WNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc8a2776bd48e62498418d7eede80bde0f00c6b5d67286abf49499d7f7b65b95c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x19bc90c8301914433c5e9b74a4eaac8942f64ea79d509f445799459fa10695da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/1155-WNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// NatSpec format convention - https://docs.soliditylang.org/en/v0.5.10/natspec-format.html\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Hex} from \\\"./lib/Strings.sol\\\";\\n\\ncontract WNFT is ERC1155Upgradeable, AccessControlUpgradeable {\\n    error InvalidPurchaseOperation();\\n    using Hex for uint256;\\n\\n    uint8 internal constant NFT_SUPPLY = 1;\\n    bytes32 public constant NFT_MINTER_ROLE = keccak256(\\\"NFT_MINTER_ROLE\\\");\\n    mapping(uint256 => mapping(address => uint256)) private _nftApprovals;\\n\\n    event ApprovalForCID(address indexed operator, uint256 cid, uint256 approved);\\n\\n    /// The current NFT holder\\n    mapping(uint256 => address) internal holders;\\n    uint32 public version;\\n\\n    function initialize() public initializer {\\n        __ERC1155_init(\\\"ipfs://f0{id}/index.json\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(NFT_MINTER_ROLE, msg.sender);\\n    }\\n\\n\\n    function uri(uint256 _tokenId) public view virtual override returns (string memory) {\\n        string memory hexTokenToString;\\n        hexTokenToString = _tokenId.toHexStr();\\n        return string(\\n            abi.encodePacked(\\n                \\\"ipfs://f0\\\",\\n                hexTokenToString,\\n                \\\"/index.json\\\"\\n            )\\n        );\\n    }\\n\\n    function upgrade() external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Version cannot be updated.\\\");\\n        version++;\\n    }\\n\\n    function setURI(string memory newuri) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"URI cannot be updated.\\\");\\n        _setURI(newuri);\\n    }\\n\\n    /**\\n    * @notice This works like setApprovalForAll with cid reference instead of sender\\n    * Why this? ApprovalForAll set approval for every action from operator. In our case we need\\n    * allow actions for specific cid and operator\\n    * @param operator current buyer\\n    * @param cid NFT id\\n    * @param approved bid amount for cid\\n    * @dev See {IERC1155-setApprovalForAll}.\\n    *\\n     */\\n    function setApprovalFor(address operator, uint256 cid, uint256 approved) public virtual {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n        require(\\n            _msgSender() == holders[cid] || holders[cid] == address(0x0),\\n            \\\"Only owner can set approval for CID\\\"\\n        );\\n\\n        _nftApprovals[cid][operator] = approved;\\n        emit ApprovalForCID(operator, cid, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedFor(address operator, uint256 cid) public view virtual returns (bool) {\\n        return _nftApprovals[cid][operator] != 0;\\n    }\\n\\n    /** @notice Mint token for buyer and transfer payment for seller\\n      * @param cid IPFS content unique identifier.\\n      * @param owner current owner for token\\n      */\\n    function lazyMintPurchase(uint256 cid, address owner) public payable {\\n        require(holders[cid] == address(0x0), \\\"CID already minted\\\");\\n        require(isApprovedFor(msg.sender, cid), \\\"Caller is not owner nor approved\\\");\\n        require(msg.value == _nftApprovals[cid][msg.sender], \\\"Invalid amount for approved bid\\\");\\n\\n        address payable seller = payable(owner);\\n        (bool successPay,) = seller.call{value : msg.value}(\\\"\\\");\\n        require(successPay, \\\"Failed to transfer payment to seller\\\");\\n\\n        _mint(msg.sender, cid, NFT_SUPPLY, \\\"0x0\\\");\\n        delete _nftApprovals[cid][msg.sender];\\n        /// gc\\n        holders[cid] = msg.sender;\\n\\n    }\\n\\n    /** @notice Check for safe transfer using custom approval\\n      * @param cid IPFS content unique identifier.\\n      * @dev emit PurchaseResponseReceived on purchase ready to get done\\n      */\\n    function safePurchase(uint256 cid) public payable {\\n        require(holders[cid] != address(0x0), \\\"Invalid cid\\\");\\n        require(holders[cid] != msg.sender, \\\"Invalid buyer\\\");\\n        require(isApprovedFor(msg.sender, cid), \\\"Caller is not owner nor approved\\\");\\n        require(msg.value == _nftApprovals[cid][msg.sender], \\\"Invalid amount for approved bid\\\");\\n\\n        address payable seller = payable(holders[cid]);\\n        (bool successPay,) = seller.call{value : msg.value}(\\\"\\\");\\n        require(successPay, \\\"Failed to transfer payment to seller\\\");\\n\\n        _safeTransferFrom(holders[cid], msg.sender, cid, NFT_SUPPLY, \\\"0x0\\\");\\n        delete _nftApprovals[cid][msg.sender];\\n        /// gc\\n        holders[cid] = msg.sender;\\n    }\\n\\n    function holderOf(uint256 cid) view external returns (address){\\n        return holders[cid];\\n    }\\n\\n    function mint(address account, uint256 cid)\\n    public\\n    {\\n        /// All keys already \\\"exist\\\" in a Solidity mapping with a default value of 0\\n        require(holders[cid] == address(0x0), 'This token ID has already been minted');\\n        require(hasRole(NFT_MINTER_ROLE, msg.sender), 'NFT cannot be created');\\n        holders[cid] = account;\\n        _mint(account, cid, NFT_SUPPLY, \\\"\\\");\\n    }\\n\\n    function mintBatch(address to, uint256[] memory cids)\\n    public\\n    {\\n        require(hasRole(NFT_MINTER_ROLE, msg.sender), 'NFT cannot be created');\\n        uint[] memory ids = new uint[](cids.length);\\n        uint[] memory amounts = new uint[](cids.length);\\n\\n        for (uint i = 0; i < cids.length; i++) {\\n            require(holders[cids[i]] == address(0x0), 'This token ID has already been minted');\\n            ids[i] = cids[i];\\n            holders[ids[i]] = to;\\n            amounts[i] = NFT_SUPPLY;\\n        }\\n\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    function transfer(address from, address to, uint256 cid) public {\\n        safeTransferFrom(from, to, cid, NFT_SUPPLY, \\\"0x0\\\");\\n        holders[cid] = to;\\n    }\\n\\n    function burn(address account, uint256 cid) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), 'NFT cannot be burned');\\n        _burn(account, cid, NFT_SUPPLY);\\n        holders[cid] = address(0x0);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), 'NFT cannot be burned');\\n        _burnBatch(account, ids, amounts);\\n        // TODO\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC1155Upgradeable, AccessControlUpgradeable)\\n    returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc463b330961f590f36e0759b4a014e9dd7fd24bfea623d3d912970ad7939bc03\",\"license\":\"MIT\"},\"contracts/lib/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://gist.github.com/soenkeba/c7ddf262c370f099a6256a9a76832dbe\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Hex {\\n    /**\\n     * @dev Converts a `uint256` to its `string` representation.\\n     */\\n    function toHexStr(uint256 i) internal pure returns (string memory) {\\n        if (i == 0) return \\\"0\\\";\\n        uint j = i;\\n        uint length;\\n        while (j != 0) {\\n            length++;\\n            j = j >> 4;\\n        }\\n        uint mask = 15;\\n        bytes memory bstr = new bytes(length);\\n        uint k = length;\\n        while (i != 0) {\\n            uint curr = (i & mask);\\n            bstr[--k] = curr > 9 ?\\n            bytes1(uint8(55 + curr)) :\\n            bytes1(uint8(48 + curr)); // 55 = 65 - 10\\n            i = i >> 4;\\n        }\\n        return string(bstr);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0e3aaf4a5b360d3c14ca7ba1c6bd4277b0f2b10f716632fc718c3160538fc796\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615fc080620000216000396000f3fe6080604052600436106101c15760003560e01c8063738f5469116100f7578063ba3dad8411610095578063d55ec69711610064578063d55ec6971461062d578063dbacc23714610644578063e985e9c514610681578063f242432a146106be576101c1565b8063ba3dad8414610587578063beabacc8146105b0578063c0833ee4146105d9578063d547741f14610604576101c1565b806391d14854116100d157806391d14854146104cd5780639dc29fac1461050a578063a217fddf14610533578063a22cb4651461055e576101c1565b8063738f54691461047157806375ceb3411461048d5780638129fc1c146104b6576101c1565b806336568abe116101645780634e1273f41161013e5780634e1273f4146103c457806354fd4d50146104015780636b20c4541461042c5780636c68a22314610455576101c1565b806336568abe14610335578063390ff1341461035e57806340c10f191461039b576101c1565b80630e89341c116101a05780630e89341c14610269578063248a9ca3146102a65780632eb2c2d6146102e35780632f2ff15d1461030c576101c1565b8062fdd58e146101c657806301ffc9a71461020357806302fe530514610240575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e891906142bb565b6106e7565b6040516101fa9190615106565b60405180910390f35b34801561020f57600080fd5b5061022a60048036038101906102259190614433565b6107b1565b6040516102379190614d0e565b60405180910390f35b34801561024c57600080fd5b506102676004803603810190610262919061448d565b6107c3565b005b34801561027557600080fd5b50610290600480360381019061028b91906144d6565b61081b565b60405161029d9190614d44565b60405180910390f35b3480156102b257600080fd5b506102cd60048036038101906102c891906143c6565b610851565b6040516102da9190614d29565b60405180910390f35b3480156102ef57600080fd5b5061030a60048036038101906103059190613fdb565b610871565b005b34801561031857600080fd5b50610333600480360381019061032e91906143f3565b610912565b005b34801561034157600080fd5b5061035c600480360381019061035791906143f3565b61093b565b005b34801561036a57600080fd5b50610385600480360381019061038091906142bb565b6109be565b6040516103929190614d0e565b60405180910390f35b3480156103a757600080fd5b506103c260048036038101906103bd91906142bb565b610a1c565b005b3480156103d057600080fd5b506103eb60048036038101906103e6919061434e565b610b9c565b6040516103f89190614cb5565b60405180910390f35b34801561040d57600080fd5b50610416610cb5565b604051610423919061514a565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e91906141f0565b610ccb565b005b61046f600480360381019061046a9190614503565b610d27565b005b61048b600480360381019061048691906144d6565b611046565b005b34801561049957600080fd5b506104b460048036038101906104af9190614194565b61146e565b005b3480156104c257600080fd5b506104cb61173a565b005b3480156104d957600080fd5b506104f460048036038101906104ef91906143f3565b611893565b6040516105019190614d0e565b60405180910390f35b34801561051657600080fd5b50610531600480360381019061052c91906142bb565b6118fe565b005b34801561053f57600080fd5b506105486119b0565b6040516105559190614d29565b60405180910390f35b34801561056a57600080fd5b506105856004803603810190610580919061427b565b6119b7565b005b34801561059357600080fd5b506105ae60048036038101906105a991906142fb565b6119cd565b005b3480156105bc57600080fd5b506105d760048036038101906105d291906140aa565b611bff565b005b3480156105e557600080fd5b506105ee611c9c565b6040516105fb9190614d29565b60405180910390f35b34801561061057600080fd5b5061062b600480360381019061062691906143f3565b611cc0565b005b34801561063957600080fd5b50610642611ce9565b005b34801561065057600080fd5b5061066b600480360381019061066691906144d6565b611d78565b6040516106789190614bd8565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190613f9b565b611db5565b6040516106b59190614d0e565b60405180910390f35b3480156106ca57600080fd5b506106e560048036038101906106e091906140fd565b611e49565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90614de6565b60405180910390fd5b6065600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006107bc82611eea565b9050919050565b6107d06000801b33611893565b61080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690614ea6565b60405180910390fd5b61081881611f64565b50565b60608061082783611f7e565b90508060405160200161083a9190614b5c565b604051602081830303815290604052915050919050565b600060976000838152602001908152602001600020600101549050919050565b6108796120f3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806108bf57506108be856108b96120f3565b611db5565b5b6108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590614ee6565b60405180910390fd5b61090b85858585856120fb565b5050505050565b61091b82610851565b61092c816109276120f3565b612412565b61093683836124af565b505050565b6109436120f3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a7906150e6565b60405180910390fd5b6109ba8282612590565b5050565b60008060c9600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff1660ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab590614dc6565b60405180910390fd5b610ae87f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62333611893565b610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90615026565b60405180910390fd5b8160ca600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b988282600160ff1660405180602001604052806000815250612672565b5050565b60608151835114610be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd990615086565b60405180910390fd5b6000835167ffffffffffffffff811115610bff57610bfe6155db565b5b604051908082528060200260200182016040528015610c2d5781602001602082028036833780820191505090505b50905060005b8451811015610caa57610c7a858281518110610c5257610c516155ac565b5b6020026020010151858381518110610c6d57610c6c6155ac565b5b60200260200101516106e7565b828281518110610c8d57610c8c6155ac565b5b60200260200101818152505080610ca3906154d8565b9050610c33565b508091505092915050565b60cb60009054906101000a900463ffffffff1681565b610cd86000801b33611893565b610d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0e90614f66565b60405180910390fd5b610d22838383612809565b505050565b600073ffffffffffffffffffffffffffffffffffffffff1660ca600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc090614e46565b60405180910390fd5b610dd333836109be565b610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990614fe6565b60405180910390fd5b60c9600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543414610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b90614f86565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1634604051610ecf90614b89565b60006040518083038185875af1925050503d8060008114610f0c576040519150601f19603f3d011682016040523d82523d6000602084013e610f11565b606091505b5050905080610f55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4c90614fc6565b60405180910390fd5b610f9a3385600160ff166040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250612672565b60c9600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090553360ca600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e090614e86565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561118b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118290614e06565b60405180910390fd5b61119533826109be565b6111d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cb90614fe6565b60405180910390fd5b60c9600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543414611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125d90614f86565b60405180910390fd5b600060ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16346040516112c490614b89565b60006040518083038185875af1925050503d8060008114611301576040519150601f19603f3d011682016040523d82523d6000602084013e611306565b606091505b505090508061134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134190614fc6565b60405180910390fd5b6113c360ca600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163385600160ff166040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250612abc565b60c9600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090553360ca600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6114987f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62333611893565b6114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce90615026565b60405180910390fd5b6000815167ffffffffffffffff8111156114f4576114f36155db565b5b6040519080825280602002602001820160405280156115225781602001602082028036833780820191505090505b5090506000825167ffffffffffffffff811115611542576115416155db565b5b6040519080825280602002602001820160405280156115705781602001602082028036833780820191505090505b50905060005b835181101561171857600073ffffffffffffffffffffffffffffffffffffffff1660ca60008684815181106115ae576115ad6155ac565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461163b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163290614dc6565b60405180910390fd5b83818151811061164e5761164d6155ac565b5b6020026020010151838281518110611669576116686155ac565b5b6020026020010181815250508460ca600085848151811061168d5761168c6155ac565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160ff168282815181106116f9576116f86155ac565b5b6020026020010181815250508080611710906154d8565b915050611576565b5061173484838360405180602001604052806000815250612d41565b50505050565b600060019054906101000a900460ff166117625760008054906101000a900460ff161561176b565b61176a612f60565b5b6117aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a190614f06565b60405180910390fd5b60008060019054906101000a900460ff1615905080156117fa576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6118386040518060400160405280601881526020017f697066733a2f2f66307b69647d2f696e6465782e6a736f6e0000000000000000815250612f71565b6118456000801b33612fdc565b61186f7f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62333612fdc565b80156118905760008060016101000a81548160ff0219169083151502179055505b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61190b6000801b33611893565b61194a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194190614f66565b60405180910390fd5b6119598282600160ff16612fea565b600060ca600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000801b81565b6119c96119c26120f3565b8383613209565b5050565b8273ffffffffffffffffffffffffffffffffffffffff166119ec6120f3565b73ffffffffffffffffffffffffffffffffffffffff161415611a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3a90615046565b60405180910390fd5b60ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611a956120f3565b73ffffffffffffffffffffffffffffffffffffffff161480611b165750600073ffffffffffffffffffffffffffffffffffffffff1660ca600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4c90614fa6565b60405180910390fd5b8060c9600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0a5d49223cdca66ecee577e644907f9d77e9f5c6743247ebddd0c002ba8083b28383604051611bf2929190615121565b60405180910390a2505050565b611c45838383600160ff166040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250611e49565b8160ca600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b7f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62381565b611cc982610851565b611cda81611cd56120f3565b612412565b611ce48383612590565b505050565b611cf66000801b33611893565b611d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2c90615066565b60405180910390fd5b60cb600081819054906101000a900463ffffffff1680929190611d5790615521565b91906101000a81548163ffffffff021916908363ffffffff16021790555050565b600060ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611e516120f3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611e975750611e9685611e916120f3565b611db5565b5b611ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecd90614e66565b60405180910390fd5b611ee38585858585612abc565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f5d5750611f5c82613376565b5b9050919050565b8060679080519060200190611f7a929190613c5e565b5050565b60606000821415611fc6576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120ee565b600082905060005b60008214611ff0578080611fe1906154d8565b915050600482901c9150611fce565b6000600f905060008267ffffffffffffffff811115612012576120116155db565b5b6040519080825280601f01601f1916602001820160405280156120445781602001600182028036833780820191505090505b50905060008390505b600087146120e55760008388169050600981116120795780603061207191906152cb565b60f81b61208a565b80603761208691906152cb565b60f81b5b83836120959061544b565b935083815181106120a9576120a86155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600488901c97505061204d565b81955050505050505b919050565b600033905090565b815183511461213f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612136906150a6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156121af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a690614ec6565b60405180910390fd5b60006121b96120f3565b90506121c9818787878787613458565b60005b845181101561237d5760008582815181106121ea576121e96155ac565b5b602002602001015190506000858381518110612209576122086155ac565b5b6020026020010151905060006065600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156122ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a290614f46565b60405180910390fd5b8181036065600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816065600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461236291906152cb565b9250508190555050505080612376906154d8565b90506121cc565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516123f4929190614cd7565b60405180910390a461240a818787878787613460565b505050505050565b61241c8282611893565b6124ab576124418173ffffffffffffffffffffffffffffffffffffffff166014613647565b61244f8360001c6020613647565b604051602001612460929190614b9e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a29190614d44565b60405180910390fd5b5050565b6124b98282611893565b61258c5760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506125316120f3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61259a8282611893565b1561266e5760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506126136120f3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d9906150c6565b60405180910390fd5b60006126ec6120f3565b905061270d816000876126fe88613883565b61270788613883565b87613458565b826065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461276d91906152cb565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516127eb929190615121565b60405180910390a4612802816000878787876138fd565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287090614f26565b60405180910390fd5b80518251146128bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b4906150a6565b60405180910390fd5b60006128c76120f3565b90506128e781856000868660405180602001604052806000815250613458565b60005b8351811015612a36576000848281518110612908576129076155ac565b5b602002602001015190506000848381518110612927576129266155ac565b5b6020026020010151905060006065600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156129c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c090614e26565b60405180910390fd5b8181036065600085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080612a2e906154d8565b9150506128ea565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612aae929190614cd7565b60405180910390a450505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2390614ec6565b60405180910390fd5b6000612b366120f3565b9050612b56818787612b4788613883565b612b5088613883565b87613458565b60006065600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be590614f46565b60405180910390fd5b8381036065600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836065600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ca591906152cb565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612d22929190615121565b60405180910390a4612d388288888888886138fd565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da8906150c6565b60405180910390fd5b8151835114612df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dec906150a6565b60405180910390fd5b6000612dff6120f3565b9050612e1081600087878787613458565b60005b8451811015612eca57838181518110612e2f57612e2e6155ac565b5b602002602001015160656000878481518110612e4e57612e4d6155ac565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612eb091906152cb565b925050819055508080612ec2906154d8565b915050612e13565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612f42929190614cd7565b60405180910390a4612f5981600087878787613460565b5050505050565b6000612f6b30613ae4565b15905090565b600060019054906101000a900460ff16612fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb790615006565b60405180910390fd5b612fc8613af7565b612fd0613b48565b612fd981613b99565b50565b612fe682826124af565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561305a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305190614f26565b60405180910390fd5b60006130646120f3565b90506130948185600061307687613883565b61307f87613883565b60405180602001604052806000815250613458565b60006065600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561312c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312390614e26565b60405180910390fd5b8281036065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516131fa929190615121565b60405180910390a45050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326f90615046565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516133699190614d0e565b60405180910390a3505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061344157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613451575061345082613bf4565b5b9050919050565b505050505050565b61347f8473ffffffffffffffffffffffffffffffffffffffff16613ae4565b1561363f578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016134c5959493929190614bf3565b602060405180830381600087803b1580156134df57600080fd5b505af192505050801561351057506040513d601f19601f8201168201806040525081019061350d9190614460565b60015b6135b65761351c61560a565b806308c379a014156135795750613531615e81565b8061353c575061357b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135709190614d44565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ad90614d66565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461363d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363490614da6565b60405180910390fd5b505b505050505050565b60606000600283600261365a9190615321565b61366491906152cb565b67ffffffffffffffff81111561367d5761367c6155db565b5b6040519080825280601f01601f1916602001820160405280156136af5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136e7576136e66155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061374b5761374a6155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261378b9190615321565b61379591906152cb565b90505b6001811115613835577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106137d7576137d66155ac565b5b1a60f81b8282815181106137ee576137ed6155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061382e9061544b565b9050613798565b5060008414613879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161387090614d86565b60405180910390fd5b8091505092915050565b60606000600167ffffffffffffffff8111156138a2576138a16155db565b5b6040519080825280602002602001820160405280156138d05781602001602082028036833780820191505090505b50905082816000815181106138e8576138e76155ac565b5b60200260200101818152505080915050919050565b61391c8473ffffffffffffffffffffffffffffffffffffffff16613ae4565b15613adc578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613962959493929190614c5b565b602060405180830381600087803b15801561397c57600080fd5b505af19250505080156139ad57506040513d601f19601f820116820180604052508101906139aa9190614460565b60015b613a53576139b961560a565b806308c379a01415613a1657506139ce615e81565b806139d95750613a18565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a0d9190614d44565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a4a90614d66565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ad190614da6565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b600060019054906101000a900460ff16613b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b3d90615006565b60405180910390fd5b565b600060019054906101000a900460ff16613b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b8e90615006565b60405180910390fd5b565b600060019054906101000a900460ff16613be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bdf90615006565b60405180910390fd5b613bf181611f64565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b828054613c6a90615475565b90600052602060002090601f016020900481019282613c8c5760008555613cd3565b82601f10613ca557805160ff1916838001178555613cd3565b82800160010185558215613cd3579182015b82811115613cd2578251825591602001919060010190613cb7565b5b509050613ce09190613ce4565b5090565b5b80821115613cfd576000816000905550600101613ce5565b5090565b6000613d14613d0f8461518a565b615165565b90508083825260208201905082856020860282011115613d3757613d36615631565b5b60005b85811015613d675781613d4d8882613e65565b845260208401935060208301925050600181019050613d3a565b5050509392505050565b6000613d84613d7f846151b6565b615165565b90508083825260208201905082856020860282011115613da757613da6615631565b5b60005b85811015613dd75781613dbd8882613f86565b845260208401935060208301925050600181019050613daa565b5050509392505050565b6000613df4613def846151e2565b615165565b905082815260208101848484011115613e1057613e0f615636565b5b613e1b848285615409565b509392505050565b6000613e36613e3184615213565b615165565b905082815260208101848484011115613e5257613e51615636565b5b613e5d848285615409565b509392505050565b600081359050613e7481615f17565b92915050565b600082601f830112613e8f57613e8e61562c565b5b8135613e9f848260208601613d01565b91505092915050565b600082601f830112613ebd57613ebc61562c565b5b8135613ecd848260208601613d71565b91505092915050565b600081359050613ee581615f2e565b92915050565b600081359050613efa81615f45565b92915050565b600081359050613f0f81615f5c565b92915050565b600081519050613f2481615f5c565b92915050565b600082601f830112613f3f57613f3e61562c565b5b8135613f4f848260208601613de1565b91505092915050565b600082601f830112613f6d57613f6c61562c565b5b8135613f7d848260208601613e23565b91505092915050565b600081359050613f9581615f73565b92915050565b60008060408385031215613fb257613fb1615640565b5b6000613fc085828601613e65565b9250506020613fd185828601613e65565b9150509250929050565b600080600080600060a08688031215613ff757613ff6615640565b5b600061400588828901613e65565b955050602061401688828901613e65565b945050604086013567ffffffffffffffff8111156140375761403661563b565b5b61404388828901613ea8565b935050606086013567ffffffffffffffff8111156140645761406361563b565b5b61407088828901613ea8565b925050608086013567ffffffffffffffff8111156140915761409061563b565b5b61409d88828901613f2a565b9150509295509295909350565b6000806000606084860312156140c3576140c2615640565b5b60006140d186828701613e65565b93505060206140e286828701613e65565b92505060406140f386828701613f86565b9150509250925092565b600080600080600060a0868803121561411957614118615640565b5b600061412788828901613e65565b955050602061413888828901613e65565b945050604061414988828901613f86565b935050606061415a88828901613f86565b925050608086013567ffffffffffffffff81111561417b5761417a61563b565b5b61418788828901613f2a565b9150509295509295909350565b600080604083850312156141ab576141aa615640565b5b60006141b985828601613e65565b925050602083013567ffffffffffffffff8111156141da576141d961563b565b5b6141e685828601613ea8565b9150509250929050565b60008060006060848603121561420957614208615640565b5b600061421786828701613e65565b935050602084013567ffffffffffffffff8111156142385761423761563b565b5b61424486828701613ea8565b925050604084013567ffffffffffffffff8111156142655761426461563b565b5b61427186828701613ea8565b9150509250925092565b6000806040838503121561429257614291615640565b5b60006142a085828601613e65565b92505060206142b185828601613ed6565b9150509250929050565b600080604083850312156142d2576142d1615640565b5b60006142e085828601613e65565b92505060206142f185828601613f86565b9150509250929050565b60008060006060848603121561431457614313615640565b5b600061432286828701613e65565b935050602061433386828701613f86565b925050604061434486828701613f86565b9150509250925092565b6000806040838503121561436557614364615640565b5b600083013567ffffffffffffffff8111156143835761438261563b565b5b61438f85828601613e7a565b925050602083013567ffffffffffffffff8111156143b0576143af61563b565b5b6143bc85828601613ea8565b9150509250929050565b6000602082840312156143dc576143db615640565b5b60006143ea84828501613eeb565b91505092915050565b6000806040838503121561440a57614409615640565b5b600061441885828601613eeb565b925050602061442985828601613e65565b9150509250929050565b60006020828403121561444957614448615640565b5b600061445784828501613f00565b91505092915050565b60006020828403121561447657614475615640565b5b600061448484828501613f15565b91505092915050565b6000602082840312156144a3576144a2615640565b5b600082013567ffffffffffffffff8111156144c1576144c061563b565b5b6144cd84828501613f58565b91505092915050565b6000602082840312156144ec576144eb615640565b5b60006144fa84828501613f86565b91505092915050565b6000806040838503121561451a57614519615640565b5b600061452885828601613f86565b925050602061453985828601613e65565b9150509250929050565b600061454f8383614b2f565b60208301905092915050565b6145648161537b565b82525050565b600061457582615254565b61457f8185615282565b935061458a83615244565b8060005b838110156145bb5781516145a28882614543565b97506145ad83615275565b92505060018101905061458e565b5085935050505092915050565b6145d18161538d565b82525050565b6145e081615399565b82525050565b60006145f18261525f565b6145fb8185615293565b935061460b818560208601615418565b61461481615645565b840191505092915050565b600061462a8261526a565b61463481856152af565b9350614644818560208601615418565b61464d81615645565b840191505092915050565b60006146638261526a565b61466d81856152c0565b935061467d818560208601615418565b80840191505092915050565b60006146966034836152af565b91506146a182615663565b604082019050919050565b60006146b96009836152c0565b91506146c4826156b2565b600982019050919050565b60006146dc6020836152af565b91506146e7826156db565b602082019050919050565b60006146ff6028836152af565b915061470a82615704565b604082019050919050565b60006147226025836152af565b915061472d82615753565b604082019050919050565b6000614745602b836152af565b9150614750826157a2565b604082019050919050565b6000614768600d836152af565b9150614773826157f1565b602082019050919050565b600061478b6024836152af565b91506147968261581a565b604082019050919050565b60006147ae6012836152af565b91506147b982615869565b602082019050919050565b60006147d16029836152af565b91506147dc82615892565b604082019050919050565b60006147f4600b836152af565b91506147ff826158e1565b602082019050919050565b6000614817600b836152c0565b91506148228261590a565b600b82019050919050565b600061483a6016836152af565b915061484582615933565b602082019050919050565b600061485d6025836152af565b91506148688261595c565b604082019050919050565b60006148806032836152af565b915061488b826159ab565b604082019050919050565b60006148a3602e836152af565b91506148ae826159fa565b604082019050919050565b60006148c66023836152af565b91506148d182615a49565b604082019050919050565b60006148e9602a836152af565b91506148f482615a98565b604082019050919050565b600061490c6014836152af565b915061491782615ae7565b602082019050919050565b600061492f601f836152af565b915061493a82615b10565b602082019050919050565b60006149526023836152af565b915061495d82615b39565b604082019050919050565b60006149756024836152af565b915061498082615b88565b604082019050919050565b60006149986020836152af565b91506149a382615bd7565b602082019050919050565b60006149bb6000836152a4565b91506149c682615c00565b600082019050919050565b60006149de602b836152af565b91506149e982615c03565b604082019050919050565b6000614a016017836152c0565b9150614a0c82615c52565b601782019050919050565b6000614a246015836152af565b9150614a2f82615c7b565b602082019050919050565b6000614a476029836152af565b9150614a5282615ca4565b604082019050919050565b6000614a6a601a836152af565b9150614a7582615cf3565b602082019050919050565b6000614a8d6029836152af565b9150614a9882615d1c565b604082019050919050565b6000614ab06028836152af565b9150614abb82615d6b565b604082019050919050565b6000614ad36021836152af565b9150614ade82615dba565b604082019050919050565b6000614af66011836152c0565b9150614b0182615e09565b601182019050919050565b6000614b19602f836152af565b9150614b2482615e32565b604082019050919050565b614b38816153ef565b82525050565b614b47816153ef565b82525050565b614b56816153f9565b82525050565b6000614b67826146ac565b9150614b738284614658565b9150614b7e8261480a565b915081905092915050565b6000614b94826149ae565b9150819050919050565b6000614ba9826149f4565b9150614bb58285614658565b9150614bc082614ae9565b9150614bcc8284614658565b91508190509392505050565b6000602082019050614bed600083018461455b565b92915050565b600060a082019050614c08600083018861455b565b614c15602083018761455b565b8181036040830152614c27818661456a565b90508181036060830152614c3b818561456a565b90508181036080830152614c4f81846145e6565b90509695505050505050565b600060a082019050614c70600083018861455b565b614c7d602083018761455b565b614c8a6040830186614b3e565b614c976060830185614b3e565b8181036080830152614ca981846145e6565b90509695505050505050565b60006020820190508181036000830152614ccf818461456a565b905092915050565b60006040820190508181036000830152614cf1818561456a565b90508181036020830152614d05818461456a565b90509392505050565b6000602082019050614d2360008301846145c8565b92915050565b6000602082019050614d3e60008301846145d7565b92915050565b60006020820190508181036000830152614d5e818461461f565b905092915050565b60006020820190508181036000830152614d7f81614689565b9050919050565b60006020820190508181036000830152614d9f816146cf565b9050919050565b60006020820190508181036000830152614dbf816146f2565b9050919050565b60006020820190508181036000830152614ddf81614715565b9050919050565b60006020820190508181036000830152614dff81614738565b9050919050565b60006020820190508181036000830152614e1f8161475b565b9050919050565b60006020820190508181036000830152614e3f8161477e565b9050919050565b60006020820190508181036000830152614e5f816147a1565b9050919050565b60006020820190508181036000830152614e7f816147c4565b9050919050565b60006020820190508181036000830152614e9f816147e7565b9050919050565b60006020820190508181036000830152614ebf8161482d565b9050919050565b60006020820190508181036000830152614edf81614850565b9050919050565b60006020820190508181036000830152614eff81614873565b9050919050565b60006020820190508181036000830152614f1f81614896565b9050919050565b60006020820190508181036000830152614f3f816148b9565b9050919050565b60006020820190508181036000830152614f5f816148dc565b9050919050565b60006020820190508181036000830152614f7f816148ff565b9050919050565b60006020820190508181036000830152614f9f81614922565b9050919050565b60006020820190508181036000830152614fbf81614945565b9050919050565b60006020820190508181036000830152614fdf81614968565b9050919050565b60006020820190508181036000830152614fff8161498b565b9050919050565b6000602082019050818103600083015261501f816149d1565b9050919050565b6000602082019050818103600083015261503f81614a17565b9050919050565b6000602082019050818103600083015261505f81614a3a565b9050919050565b6000602082019050818103600083015261507f81614a5d565b9050919050565b6000602082019050818103600083015261509f81614a80565b9050919050565b600060208201905081810360008301526150bf81614aa3565b9050919050565b600060208201905081810360008301526150df81614ac6565b9050919050565b600060208201905081810360008301526150ff81614b0c565b9050919050565b600060208201905061511b6000830184614b3e565b92915050565b60006040820190506151366000830185614b3e565b6151436020830184614b3e565b9392505050565b600060208201905061515f6000830184614b4d565b92915050565b600061516f615180565b905061517b82826154a7565b919050565b6000604051905090565b600067ffffffffffffffff8211156151a5576151a46155db565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156151d1576151d06155db565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156151fd576151fc6155db565b5b61520682615645565b9050602081019050919050565b600067ffffffffffffffff82111561522e5761522d6155db565b5b61523782615645565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006152d6826153ef565b91506152e1836153ef565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156153165761531561554e565b5b828201905092915050565b600061532c826153ef565b9150615337836153ef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153705761536f61554e565b5b828202905092915050565b6000615386826153cf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b8381101561543657808201518184015260208101905061541b565b83811115615445576000848401525b50505050565b6000615456826153ef565b9150600082141561546a5761546961554e565b5b600182039050919050565b6000600282049050600182168061548d57607f821691505b602082108114156154a1576154a061557d565b5b50919050565b6154b082615645565b810181811067ffffffffffffffff821117156154cf576154ce6155db565b5b80604052505050565b60006154e3826153ef565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155165761551561554e565b5b600182019050919050565b600061552c826153f9565b915063ffffffff8214156155435761554261554e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156156295760046000803e615626600051615656565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f697066733a2f2f66300000000000000000000000000000000000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f5468697320746f6b656e2049442068617320616c7265616479206265656e206d60008201527f696e746564000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f496e76616c696420627579657200000000000000000000000000000000000000600082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f43494420616c7265616479206d696e7465640000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420636964000000000000000000000000000000000000000000600082015250565b7f2f696e6465782e6a736f6e000000000000000000000000000000000000000000600082015250565b7f5552492063616e6e6f7420626520757064617465642e00000000000000000000600082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4e46542063616e6e6f74206265206275726e6564000000000000000000000000600082015250565b7f496e76616c696420616d6f756e7420666f7220617070726f7665642062696400600082015250565b7f4f6e6c79206f776e65722063616e2073657420617070726f76616c20666f722060008201527f4349440000000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e73666572207061796d656e7420746f20736560008201527f6c6c657200000000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564600082015250565b50565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4e46542063616e6e6f7420626520637265617465640000000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f56657273696f6e2063616e6e6f7420626520757064617465642e000000000000600082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600060443d1015615e9157615f14565b615e99615180565b60043d036004823e80513d602482011167ffffffffffffffff82111715615ec1575050615f14565b808201805167ffffffffffffffff811115615edf5750505050615f14565b80602083010160043d038501811115615efc575050505050615f14565b615f0b826020018501866154a7565b82955050505050505b90565b615f208161537b565b8114615f2b57600080fd5b50565b615f378161538d565b8114615f4257600080fd5b50565b615f4e81615399565b8114615f5957600080fd5b50565b615f65816153a3565b8114615f7057600080fd5b50565b615f7c816153ef565b8114615f8757600080fd5b5056fea2646970667358221220b1207dd2bbb25c02b2ae0d7d5d5cdeb9ec289c0359f581934355576059a0849e64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101c15760003560e01c8063738f5469116100f7578063ba3dad8411610095578063d55ec69711610064578063d55ec6971461062d578063dbacc23714610644578063e985e9c514610681578063f242432a146106be576101c1565b8063ba3dad8414610587578063beabacc8146105b0578063c0833ee4146105d9578063d547741f14610604576101c1565b806391d14854116100d157806391d14854146104cd5780639dc29fac1461050a578063a217fddf14610533578063a22cb4651461055e576101c1565b8063738f54691461047157806375ceb3411461048d5780638129fc1c146104b6576101c1565b806336568abe116101645780634e1273f41161013e5780634e1273f4146103c457806354fd4d50146104015780636b20c4541461042c5780636c68a22314610455576101c1565b806336568abe14610335578063390ff1341461035e57806340c10f191461039b576101c1565b80630e89341c116101a05780630e89341c14610269578063248a9ca3146102a65780632eb2c2d6146102e35780632f2ff15d1461030c576101c1565b8062fdd58e146101c657806301ffc9a71461020357806302fe530514610240575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e891906142bb565b6106e7565b6040516101fa9190615106565b60405180910390f35b34801561020f57600080fd5b5061022a60048036038101906102259190614433565b6107b1565b6040516102379190614d0e565b60405180910390f35b34801561024c57600080fd5b506102676004803603810190610262919061448d565b6107c3565b005b34801561027557600080fd5b50610290600480360381019061028b91906144d6565b61081b565b60405161029d9190614d44565b60405180910390f35b3480156102b257600080fd5b506102cd60048036038101906102c891906143c6565b610851565b6040516102da9190614d29565b60405180910390f35b3480156102ef57600080fd5b5061030a60048036038101906103059190613fdb565b610871565b005b34801561031857600080fd5b50610333600480360381019061032e91906143f3565b610912565b005b34801561034157600080fd5b5061035c600480360381019061035791906143f3565b61093b565b005b34801561036a57600080fd5b50610385600480360381019061038091906142bb565b6109be565b6040516103929190614d0e565b60405180910390f35b3480156103a757600080fd5b506103c260048036038101906103bd91906142bb565b610a1c565b005b3480156103d057600080fd5b506103eb60048036038101906103e6919061434e565b610b9c565b6040516103f89190614cb5565b60405180910390f35b34801561040d57600080fd5b50610416610cb5565b604051610423919061514a565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e91906141f0565b610ccb565b005b61046f600480360381019061046a9190614503565b610d27565b005b61048b600480360381019061048691906144d6565b611046565b005b34801561049957600080fd5b506104b460048036038101906104af9190614194565b61146e565b005b3480156104c257600080fd5b506104cb61173a565b005b3480156104d957600080fd5b506104f460048036038101906104ef91906143f3565b611893565b6040516105019190614d0e565b60405180910390f35b34801561051657600080fd5b50610531600480360381019061052c91906142bb565b6118fe565b005b34801561053f57600080fd5b506105486119b0565b6040516105559190614d29565b60405180910390f35b34801561056a57600080fd5b506105856004803603810190610580919061427b565b6119b7565b005b34801561059357600080fd5b506105ae60048036038101906105a991906142fb565b6119cd565b005b3480156105bc57600080fd5b506105d760048036038101906105d291906140aa565b611bff565b005b3480156105e557600080fd5b506105ee611c9c565b6040516105fb9190614d29565b60405180910390f35b34801561061057600080fd5b5061062b600480360381019061062691906143f3565b611cc0565b005b34801561063957600080fd5b50610642611ce9565b005b34801561065057600080fd5b5061066b600480360381019061066691906144d6565b611d78565b6040516106789190614bd8565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190613f9b565b611db5565b6040516106b59190614d0e565b60405180910390f35b3480156106ca57600080fd5b506106e560048036038101906106e091906140fd565b611e49565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f90614de6565b60405180910390fd5b6065600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006107bc82611eea565b9050919050565b6107d06000801b33611893565b61080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690614ea6565b60405180910390fd5b61081881611f64565b50565b60608061082783611f7e565b90508060405160200161083a9190614b5c565b604051602081830303815290604052915050919050565b600060976000838152602001908152602001600020600101549050919050565b6108796120f3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806108bf57506108be856108b96120f3565b611db5565b5b6108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590614ee6565b60405180910390fd5b61090b85858585856120fb565b5050505050565b61091b82610851565b61092c816109276120f3565b612412565b61093683836124af565b505050565b6109436120f3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a7906150e6565b60405180910390fd5b6109ba8282612590565b5050565b60008060c9600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff1660ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab590614dc6565b60405180910390fd5b610ae87f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62333611893565b610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90615026565b60405180910390fd5b8160ca600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b988282600160ff1660405180602001604052806000815250612672565b5050565b60608151835114610be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd990615086565b60405180910390fd5b6000835167ffffffffffffffff811115610bff57610bfe6155db565b5b604051908082528060200260200182016040528015610c2d5781602001602082028036833780820191505090505b50905060005b8451811015610caa57610c7a858281518110610c5257610c516155ac565b5b6020026020010151858381518110610c6d57610c6c6155ac565b5b60200260200101516106e7565b828281518110610c8d57610c8c6155ac565b5b60200260200101818152505080610ca3906154d8565b9050610c33565b508091505092915050565b60cb60009054906101000a900463ffffffff1681565b610cd86000801b33611893565b610d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0e90614f66565b60405180910390fd5b610d22838383612809565b505050565b600073ffffffffffffffffffffffffffffffffffffffff1660ca600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc090614e46565b60405180910390fd5b610dd333836109be565b610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990614fe6565b60405180910390fd5b60c9600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543414610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b90614f86565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1634604051610ecf90614b89565b60006040518083038185875af1925050503d8060008114610f0c576040519150601f19603f3d011682016040523d82523d6000602084013e610f11565b606091505b5050905080610f55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4c90614fc6565b60405180910390fd5b610f9a3385600160ff166040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250612672565b60c9600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090553360ca600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff1660ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e090614e86565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561118b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118290614e06565b60405180910390fd5b61119533826109be565b6111d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cb90614fe6565b60405180910390fd5b60c9600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543414611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125d90614f86565b60405180910390fd5b600060ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16346040516112c490614b89565b60006040518083038185875af1925050503d8060008114611301576040519150601f19603f3d011682016040523d82523d6000602084013e611306565b606091505b505090508061134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134190614fc6565b60405180910390fd5b6113c360ca600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163385600160ff166040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250612abc565b60c9600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090553360ca600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6114987f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62333611893565b6114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce90615026565b60405180910390fd5b6000815167ffffffffffffffff8111156114f4576114f36155db565b5b6040519080825280602002602001820160405280156115225781602001602082028036833780820191505090505b5090506000825167ffffffffffffffff811115611542576115416155db565b5b6040519080825280602002602001820160405280156115705781602001602082028036833780820191505090505b50905060005b835181101561171857600073ffffffffffffffffffffffffffffffffffffffff1660ca60008684815181106115ae576115ad6155ac565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461163b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163290614dc6565b60405180910390fd5b83818151811061164e5761164d6155ac565b5b6020026020010151838281518110611669576116686155ac565b5b6020026020010181815250508460ca600085848151811061168d5761168c6155ac565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160ff168282815181106116f9576116f86155ac565b5b6020026020010181815250508080611710906154d8565b915050611576565b5061173484838360405180602001604052806000815250612d41565b50505050565b600060019054906101000a900460ff166117625760008054906101000a900460ff161561176b565b61176a612f60565b5b6117aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a190614f06565b60405180910390fd5b60008060019054906101000a900460ff1615905080156117fa576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6118386040518060400160405280601881526020017f697066733a2f2f66307b69647d2f696e6465782e6a736f6e0000000000000000815250612f71565b6118456000801b33612fdc565b61186f7f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62333612fdc565b80156118905760008060016101000a81548160ff0219169083151502179055505b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61190b6000801b33611893565b61194a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194190614f66565b60405180910390fd5b6119598282600160ff16612fea565b600060ca600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000801b81565b6119c96119c26120f3565b8383613209565b5050565b8273ffffffffffffffffffffffffffffffffffffffff166119ec6120f3565b73ffffffffffffffffffffffffffffffffffffffff161415611a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3a90615046565b60405180910390fd5b60ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611a956120f3565b73ffffffffffffffffffffffffffffffffffffffff161480611b165750600073ffffffffffffffffffffffffffffffffffffffff1660ca600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4c90614fa6565b60405180910390fd5b8060c9600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0a5d49223cdca66ecee577e644907f9d77e9f5c6743247ebddd0c002ba8083b28383604051611bf2929190615121565b60405180910390a2505050565b611c45838383600160ff166040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250611e49565b8160ca600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b7f3a5b873628a2c49bf313473942acc8932f6f84c76b74bf3db0e4d8b51277a62381565b611cc982610851565b611cda81611cd56120f3565b612412565b611ce48383612590565b505050565b611cf66000801b33611893565b611d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2c90615066565b60405180910390fd5b60cb600081819054906101000a900463ffffffff1680929190611d5790615521565b91906101000a81548163ffffffff021916908363ffffffff16021790555050565b600060ca600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611e516120f3565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611e975750611e9685611e916120f3565b611db5565b5b611ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecd90614e66565b60405180910390fd5b611ee38585858585612abc565b5050505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f5d5750611f5c82613376565b5b9050919050565b8060679080519060200190611f7a929190613c5e565b5050565b60606000821415611fc6576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120ee565b600082905060005b60008214611ff0578080611fe1906154d8565b915050600482901c9150611fce565b6000600f905060008267ffffffffffffffff811115612012576120116155db565b5b6040519080825280601f01601f1916602001820160405280156120445781602001600182028036833780820191505090505b50905060008390505b600087146120e55760008388169050600981116120795780603061207191906152cb565b60f81b61208a565b80603761208691906152cb565b60f81b5b83836120959061544b565b935083815181106120a9576120a86155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600488901c97505061204d565b81955050505050505b919050565b600033905090565b815183511461213f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612136906150a6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156121af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a690614ec6565b60405180910390fd5b60006121b96120f3565b90506121c9818787878787613458565b60005b845181101561237d5760008582815181106121ea576121e96155ac565b5b602002602001015190506000858381518110612209576122086155ac565b5b6020026020010151905060006065600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156122ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a290614f46565b60405180910390fd5b8181036065600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816065600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461236291906152cb565b9250508190555050505080612376906154d8565b90506121cc565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516123f4929190614cd7565b60405180910390a461240a818787878787613460565b505050505050565b61241c8282611893565b6124ab576124418173ffffffffffffffffffffffffffffffffffffffff166014613647565b61244f8360001c6020613647565b604051602001612460929190614b9e565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a29190614d44565b60405180910390fd5b5050565b6124b98282611893565b61258c5760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506125316120f3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61259a8282611893565b1561266e5760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506126136120f3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156126e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d9906150c6565b60405180910390fd5b60006126ec6120f3565b905061270d816000876126fe88613883565b61270788613883565b87613458565b826065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461276d91906152cb565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516127eb929190615121565b60405180910390a4612802816000878787876138fd565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287090614f26565b60405180910390fd5b80518251146128bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b4906150a6565b60405180910390fd5b60006128c76120f3565b90506128e781856000868660405180602001604052806000815250613458565b60005b8351811015612a36576000848281518110612908576129076155ac565b5b602002602001015190506000848381518110612927576129266155ac565b5b6020026020010151905060006065600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156129c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c090614e26565b60405180910390fd5b8181036065600085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080612a2e906154d8565b9150506128ea565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612aae929190614cd7565b60405180910390a450505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2390614ec6565b60405180910390fd5b6000612b366120f3565b9050612b56818787612b4788613883565b612b5088613883565b87613458565b60006065600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be590614f46565b60405180910390fd5b8381036065600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836065600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ca591906152cb565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612d22929190615121565b60405180910390a4612d388288888888886138fd565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da8906150c6565b60405180910390fd5b8151835114612df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dec906150a6565b60405180910390fd5b6000612dff6120f3565b9050612e1081600087878787613458565b60005b8451811015612eca57838181518110612e2f57612e2e6155ac565b5b602002602001015160656000878481518110612e4e57612e4d6155ac565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612eb091906152cb565b925050819055508080612ec2906154d8565b915050612e13565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612f42929190614cd7565b60405180910390a4612f5981600087878787613460565b5050505050565b6000612f6b30613ae4565b15905090565b600060019054906101000a900460ff16612fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb790615006565b60405180910390fd5b612fc8613af7565b612fd0613b48565b612fd981613b99565b50565b612fe682826124af565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561305a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305190614f26565b60405180910390fd5b60006130646120f3565b90506130948185600061307687613883565b61307f87613883565b60405180602001604052806000815250613458565b60006065600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561312c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312390614e26565b60405180910390fd5b8281036065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516131fa929190615121565b60405180910390a45050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326f90615046565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516133699190614d0e565b60405180910390a3505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061344157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613451575061345082613bf4565b5b9050919050565b505050505050565b61347f8473ffffffffffffffffffffffffffffffffffffffff16613ae4565b1561363f578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016134c5959493929190614bf3565b602060405180830381600087803b1580156134df57600080fd5b505af192505050801561351057506040513d601f19601f8201168201806040525081019061350d9190614460565b60015b6135b65761351c61560a565b806308c379a014156135795750613531615e81565b8061353c575061357b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135709190614d44565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ad90614d66565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461363d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363490614da6565b60405180910390fd5b505b505050505050565b60606000600283600261365a9190615321565b61366491906152cb565b67ffffffffffffffff81111561367d5761367c6155db565b5b6040519080825280601f01601f1916602001820160405280156136af5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136e7576136e66155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061374b5761374a6155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261378b9190615321565b61379591906152cb565b90505b6001811115613835577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106137d7576137d66155ac565b5b1a60f81b8282815181106137ee576137ed6155ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061382e9061544b565b9050613798565b5060008414613879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161387090614d86565b60405180910390fd5b8091505092915050565b60606000600167ffffffffffffffff8111156138a2576138a16155db565b5b6040519080825280602002602001820160405280156138d05781602001602082028036833780820191505090505b50905082816000815181106138e8576138e76155ac565b5b60200260200101818152505080915050919050565b61391c8473ffffffffffffffffffffffffffffffffffffffff16613ae4565b15613adc578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613962959493929190614c5b565b602060405180830381600087803b15801561397c57600080fd5b505af19250505080156139ad57506040513d601f19601f820116820180604052508101906139aa9190614460565b60015b613a53576139b961560a565b806308c379a01415613a1657506139ce615e81565b806139d95750613a18565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a0d9190614d44565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a4a90614d66565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ad190614da6565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b600060019054906101000a900460ff16613b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b3d90615006565b60405180910390fd5b565b600060019054906101000a900460ff16613b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b8e90615006565b60405180910390fd5b565b600060019054906101000a900460ff16613be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bdf90615006565b60405180910390fd5b613bf181611f64565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b828054613c6a90615475565b90600052602060002090601f016020900481019282613c8c5760008555613cd3565b82601f10613ca557805160ff1916838001178555613cd3565b82800160010185558215613cd3579182015b82811115613cd2578251825591602001919060010190613cb7565b5b509050613ce09190613ce4565b5090565b5b80821115613cfd576000816000905550600101613ce5565b5090565b6000613d14613d0f8461518a565b615165565b90508083825260208201905082856020860282011115613d3757613d36615631565b5b60005b85811015613d675781613d4d8882613e65565b845260208401935060208301925050600181019050613d3a565b5050509392505050565b6000613d84613d7f846151b6565b615165565b90508083825260208201905082856020860282011115613da757613da6615631565b5b60005b85811015613dd75781613dbd8882613f86565b845260208401935060208301925050600181019050613daa565b5050509392505050565b6000613df4613def846151e2565b615165565b905082815260208101848484011115613e1057613e0f615636565b5b613e1b848285615409565b509392505050565b6000613e36613e3184615213565b615165565b905082815260208101848484011115613e5257613e51615636565b5b613e5d848285615409565b509392505050565b600081359050613e7481615f17565b92915050565b600082601f830112613e8f57613e8e61562c565b5b8135613e9f848260208601613d01565b91505092915050565b600082601f830112613ebd57613ebc61562c565b5b8135613ecd848260208601613d71565b91505092915050565b600081359050613ee581615f2e565b92915050565b600081359050613efa81615f45565b92915050565b600081359050613f0f81615f5c565b92915050565b600081519050613f2481615f5c565b92915050565b600082601f830112613f3f57613f3e61562c565b5b8135613f4f848260208601613de1565b91505092915050565b600082601f830112613f6d57613f6c61562c565b5b8135613f7d848260208601613e23565b91505092915050565b600081359050613f9581615f73565b92915050565b60008060408385031215613fb257613fb1615640565b5b6000613fc085828601613e65565b9250506020613fd185828601613e65565b9150509250929050565b600080600080600060a08688031215613ff757613ff6615640565b5b600061400588828901613e65565b955050602061401688828901613e65565b945050604086013567ffffffffffffffff8111156140375761403661563b565b5b61404388828901613ea8565b935050606086013567ffffffffffffffff8111156140645761406361563b565b5b61407088828901613ea8565b925050608086013567ffffffffffffffff8111156140915761409061563b565b5b61409d88828901613f2a565b9150509295509295909350565b6000806000606084860312156140c3576140c2615640565b5b60006140d186828701613e65565b93505060206140e286828701613e65565b92505060406140f386828701613f86565b9150509250925092565b600080600080600060a0868803121561411957614118615640565b5b600061412788828901613e65565b955050602061413888828901613e65565b945050604061414988828901613f86565b935050606061415a88828901613f86565b925050608086013567ffffffffffffffff81111561417b5761417a61563b565b5b61418788828901613f2a565b9150509295509295909350565b600080604083850312156141ab576141aa615640565b5b60006141b985828601613e65565b925050602083013567ffffffffffffffff8111156141da576141d961563b565b5b6141e685828601613ea8565b9150509250929050565b60008060006060848603121561420957614208615640565b5b600061421786828701613e65565b935050602084013567ffffffffffffffff8111156142385761423761563b565b5b61424486828701613ea8565b925050604084013567ffffffffffffffff8111156142655761426461563b565b5b61427186828701613ea8565b9150509250925092565b6000806040838503121561429257614291615640565b5b60006142a085828601613e65565b92505060206142b185828601613ed6565b9150509250929050565b600080604083850312156142d2576142d1615640565b5b60006142e085828601613e65565b92505060206142f185828601613f86565b9150509250929050565b60008060006060848603121561431457614313615640565b5b600061432286828701613e65565b935050602061433386828701613f86565b925050604061434486828701613f86565b9150509250925092565b6000806040838503121561436557614364615640565b5b600083013567ffffffffffffffff8111156143835761438261563b565b5b61438f85828601613e7a565b925050602083013567ffffffffffffffff8111156143b0576143af61563b565b5b6143bc85828601613ea8565b9150509250929050565b6000602082840312156143dc576143db615640565b5b60006143ea84828501613eeb565b91505092915050565b6000806040838503121561440a57614409615640565b5b600061441885828601613eeb565b925050602061442985828601613e65565b9150509250929050565b60006020828403121561444957614448615640565b5b600061445784828501613f00565b91505092915050565b60006020828403121561447657614475615640565b5b600061448484828501613f15565b91505092915050565b6000602082840312156144a3576144a2615640565b5b600082013567ffffffffffffffff8111156144c1576144c061563b565b5b6144cd84828501613f58565b91505092915050565b6000602082840312156144ec576144eb615640565b5b60006144fa84828501613f86565b91505092915050565b6000806040838503121561451a57614519615640565b5b600061452885828601613f86565b925050602061453985828601613e65565b9150509250929050565b600061454f8383614b2f565b60208301905092915050565b6145648161537b565b82525050565b600061457582615254565b61457f8185615282565b935061458a83615244565b8060005b838110156145bb5781516145a28882614543565b97506145ad83615275565b92505060018101905061458e565b5085935050505092915050565b6145d18161538d565b82525050565b6145e081615399565b82525050565b60006145f18261525f565b6145fb8185615293565b935061460b818560208601615418565b61461481615645565b840191505092915050565b600061462a8261526a565b61463481856152af565b9350614644818560208601615418565b61464d81615645565b840191505092915050565b60006146638261526a565b61466d81856152c0565b935061467d818560208601615418565b80840191505092915050565b60006146966034836152af565b91506146a182615663565b604082019050919050565b60006146b96009836152c0565b91506146c4826156b2565b600982019050919050565b60006146dc6020836152af565b91506146e7826156db565b602082019050919050565b60006146ff6028836152af565b915061470a82615704565b604082019050919050565b60006147226025836152af565b915061472d82615753565b604082019050919050565b6000614745602b836152af565b9150614750826157a2565b604082019050919050565b6000614768600d836152af565b9150614773826157f1565b602082019050919050565b600061478b6024836152af565b91506147968261581a565b604082019050919050565b60006147ae6012836152af565b91506147b982615869565b602082019050919050565b60006147d16029836152af565b91506147dc82615892565b604082019050919050565b60006147f4600b836152af565b91506147ff826158e1565b602082019050919050565b6000614817600b836152c0565b91506148228261590a565b600b82019050919050565b600061483a6016836152af565b915061484582615933565b602082019050919050565b600061485d6025836152af565b91506148688261595c565b604082019050919050565b60006148806032836152af565b915061488b826159ab565b604082019050919050565b60006148a3602e836152af565b91506148ae826159fa565b604082019050919050565b60006148c66023836152af565b91506148d182615a49565b604082019050919050565b60006148e9602a836152af565b91506148f482615a98565b604082019050919050565b600061490c6014836152af565b915061491782615ae7565b602082019050919050565b600061492f601f836152af565b915061493a82615b10565b602082019050919050565b60006149526023836152af565b915061495d82615b39565b604082019050919050565b60006149756024836152af565b915061498082615b88565b604082019050919050565b60006149986020836152af565b91506149a382615bd7565b602082019050919050565b60006149bb6000836152a4565b91506149c682615c00565b600082019050919050565b60006149de602b836152af565b91506149e982615c03565b604082019050919050565b6000614a016017836152c0565b9150614a0c82615c52565b601782019050919050565b6000614a246015836152af565b9150614a2f82615c7b565b602082019050919050565b6000614a476029836152af565b9150614a5282615ca4565b604082019050919050565b6000614a6a601a836152af565b9150614a7582615cf3565b602082019050919050565b6000614a8d6029836152af565b9150614a9882615d1c565b604082019050919050565b6000614ab06028836152af565b9150614abb82615d6b565b604082019050919050565b6000614ad36021836152af565b9150614ade82615dba565b604082019050919050565b6000614af66011836152c0565b9150614b0182615e09565b601182019050919050565b6000614b19602f836152af565b9150614b2482615e32565b604082019050919050565b614b38816153ef565b82525050565b614b47816153ef565b82525050565b614b56816153f9565b82525050565b6000614b67826146ac565b9150614b738284614658565b9150614b7e8261480a565b915081905092915050565b6000614b94826149ae565b9150819050919050565b6000614ba9826149f4565b9150614bb58285614658565b9150614bc082614ae9565b9150614bcc8284614658565b91508190509392505050565b6000602082019050614bed600083018461455b565b92915050565b600060a082019050614c08600083018861455b565b614c15602083018761455b565b8181036040830152614c27818661456a565b90508181036060830152614c3b818561456a565b90508181036080830152614c4f81846145e6565b90509695505050505050565b600060a082019050614c70600083018861455b565b614c7d602083018761455b565b614c8a6040830186614b3e565b614c976060830185614b3e565b8181036080830152614ca981846145e6565b90509695505050505050565b60006020820190508181036000830152614ccf818461456a565b905092915050565b60006040820190508181036000830152614cf1818561456a565b90508181036020830152614d05818461456a565b90509392505050565b6000602082019050614d2360008301846145c8565b92915050565b6000602082019050614d3e60008301846145d7565b92915050565b60006020820190508181036000830152614d5e818461461f565b905092915050565b60006020820190508181036000830152614d7f81614689565b9050919050565b60006020820190508181036000830152614d9f816146cf565b9050919050565b60006020820190508181036000830152614dbf816146f2565b9050919050565b60006020820190508181036000830152614ddf81614715565b9050919050565b60006020820190508181036000830152614dff81614738565b9050919050565b60006020820190508181036000830152614e1f8161475b565b9050919050565b60006020820190508181036000830152614e3f8161477e565b9050919050565b60006020820190508181036000830152614e5f816147a1565b9050919050565b60006020820190508181036000830152614e7f816147c4565b9050919050565b60006020820190508181036000830152614e9f816147e7565b9050919050565b60006020820190508181036000830152614ebf8161482d565b9050919050565b60006020820190508181036000830152614edf81614850565b9050919050565b60006020820190508181036000830152614eff81614873565b9050919050565b60006020820190508181036000830152614f1f81614896565b9050919050565b60006020820190508181036000830152614f3f816148b9565b9050919050565b60006020820190508181036000830152614f5f816148dc565b9050919050565b60006020820190508181036000830152614f7f816148ff565b9050919050565b60006020820190508181036000830152614f9f81614922565b9050919050565b60006020820190508181036000830152614fbf81614945565b9050919050565b60006020820190508181036000830152614fdf81614968565b9050919050565b60006020820190508181036000830152614fff8161498b565b9050919050565b6000602082019050818103600083015261501f816149d1565b9050919050565b6000602082019050818103600083015261503f81614a17565b9050919050565b6000602082019050818103600083015261505f81614a3a565b9050919050565b6000602082019050818103600083015261507f81614a5d565b9050919050565b6000602082019050818103600083015261509f81614a80565b9050919050565b600060208201905081810360008301526150bf81614aa3565b9050919050565b600060208201905081810360008301526150df81614ac6565b9050919050565b600060208201905081810360008301526150ff81614b0c565b9050919050565b600060208201905061511b6000830184614b3e565b92915050565b60006040820190506151366000830185614b3e565b6151436020830184614b3e565b9392505050565b600060208201905061515f6000830184614b4d565b92915050565b600061516f615180565b905061517b82826154a7565b919050565b6000604051905090565b600067ffffffffffffffff8211156151a5576151a46155db565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156151d1576151d06155db565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156151fd576151fc6155db565b5b61520682615645565b9050602081019050919050565b600067ffffffffffffffff82111561522e5761522d6155db565b5b61523782615645565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006152d6826153ef565b91506152e1836153ef565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156153165761531561554e565b5b828201905092915050565b600061532c826153ef565b9150615337836153ef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153705761536f61554e565b5b828202905092915050565b6000615386826153cf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b8381101561543657808201518184015260208101905061541b565b83811115615445576000848401525b50505050565b6000615456826153ef565b9150600082141561546a5761546961554e565b5b600182039050919050565b6000600282049050600182168061548d57607f821691505b602082108114156154a1576154a061557d565b5b50919050565b6154b082615645565b810181811067ffffffffffffffff821117156154cf576154ce6155db565b5b80604052505050565b60006154e3826153ef565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155165761551561554e565b5b600182019050919050565b600061552c826153f9565b915063ffffffff8214156155435761554261554e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156156295760046000803e615626600051615656565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f697066733a2f2f66300000000000000000000000000000000000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f5468697320746f6b656e2049442068617320616c7265616479206265656e206d60008201527f696e746564000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f496e76616c696420627579657200000000000000000000000000000000000000600082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f43494420616c7265616479206d696e7465640000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420636964000000000000000000000000000000000000000000600082015250565b7f2f696e6465782e6a736f6e000000000000000000000000000000000000000000600082015250565b7f5552492063616e6e6f7420626520757064617465642e00000000000000000000600082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4e46542063616e6e6f74206265206275726e6564000000000000000000000000600082015250565b7f496e76616c696420616d6f756e7420666f7220617070726f7665642062696400600082015250565b7f4f6e6c79206f776e65722063616e2073657420617070726f76616c20666f722060008201527f4349440000000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e73666572207061796d656e7420746f20736560008201527f6c6c657200000000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564600082015250565b50565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4e46542063616e6e6f7420626520637265617465640000000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f56657273696f6e2063616e6e6f7420626520757064617465642e000000000000600082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600060443d1015615e9157615f14565b615e99615180565b60043d036004823e80513d602482011167ffffffffffffffff82111715615ec1575050615f14565b808201805167ffffffffffffffff811115615edf5750505050615f14565b80602083010160043d038501811115615efc575050505050615f14565b615f0b826020018501866154a7565b82955050505050505b90565b615f208161537b565b8114615f2b57600080fd5b50565b615f378161538d565b8114615f4257600080fd5b50565b615f4e81615399565b8114615f5957600080fd5b50565b615f65816153a3565b8114615f7057600080fd5b50565b615f7c816153ef565b8114615f8757600080fd5b5056fea2646970667358221220b1207dd2bbb25c02b2ae0d7d5d5cdeb9ec289c0359f581934355576059a0849e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedFor(address,uint256)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "lazyMintPurchase(uint256,address)": {
        "params": {
          "cid": "IPFS content unique identifier.",
          "owner": "current owner for token"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safePurchase(uint256)": {
        "details": "emit PurchaseResponseReceived on purchase ready to get done",
        "params": {
          "cid": "IPFS content unique identifier."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalFor(address,uint256,uint256)": {
        "details": "See {IERC1155-setApprovalForAll}.",
        "params": {
          "approved": "bid amount for cid",
          "cid": "NFT id",
          "operator": "current buyer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "lazyMintPurchase(uint256,address)": {
        "notice": "Mint token for buyer and transfer payment for seller"
      },
      "safePurchase(uint256)": {
        "notice": "Check for safe transfer using custom approval"
      },
      "setApprovalFor(address,uint256,uint256)": {
        "notice": "This works like setApprovalForAll with cid reference instead of sender Why this? ApprovalForAll set approval for every action from operator. In our case we need allow actions for specific cid and operator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 416,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 419,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2072,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2321,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 512,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 518,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 520,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1605,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2363,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "_nftApprovals",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2376,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "holders",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2378,
        "contract": "contracts/1155-WNFT.sol:WNFT",
        "label": "version",
        "offset": 0,
        "slot": "203",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/1155-WNFT.sol:WNFT",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/1155-WNFT.sol:WNFT",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}